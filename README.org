#+TITLE: exp-book
#+AUTHOR: dfirebird
#+STARTUP: overview

REST API for retrieving information author and books (retrieved from goodreads).

** Scripts
Use the script provided in [[file:src/bin/csv_to_data.ts][ =src/bin/csv_to_data.ts= ]] to import author csv from
data into the database, with the following format:
#+BEGIN_SRC bash
$ yarn run import <csv_file>
#+END_SRC

or

#+BEGIN_SRC bash
$ npx ts-node src/bin/csv_to_data.ts <csv_file>
#+END_SRC

** Endpoints
+ =GET /authors= - retrieve paginated list of information about authors
+ =POST /books= - create a book record
+ =GET /books= - retrieve book records
+ =PUT /books/:id= - update existing record of a book provided with =id=
+ =DELETE /books/:id= - delete a book record provided with =id=


*** GET =/authors=
Returns a paginated list of information about authors.
**** Query Parameters:
+ =page= - number of page you want to retrieve (default: 1)
+ =limit= - number of items in a single page (default: 10)

**** Response structure:
#+BEGIN_SRC json
[
  {
    "id": <id>,
    "name": <author_name>,
  }
  ...
]
#+END_SRC

*** POST =/books=
Create a record containing the information of book. 
**** Request Body
Send post request ot the endpoint with the following request body
#+BEGIN_SRC json
{
  "name": "<name_of_the_book>",
  "edition": "<edition_number_of_book>",
  "publication_year": "<year_of_publication_of_book>",
  "authors": "<array_of_author_id_from_author_endpoint>"
}
#+END_SRC
*** GET =/books=
Retrieve a records about book information.
**** Query Parameters:
+ =name= - name the book (optional)
+ =publication_year= - year of publication of the book (optional)
+ =edition= - edition of the book (optional)
+ =author= - name of the author (optional)
**** Response Structure
#+BEGIN_SRC json
[
  {
    "id": "<id>",
    "name": "<name_of_the_book>",
    "edition": "<edition_of_book>",
    "authors": "<array_of_author_of_book>"
  }
  ...
]
#+END_SRC
*** PUT =/books/:id=
Update existing records of a book. Identified using =id=.
**** Request Body
#+BEGIN_SRC json
{
  "name": "<name_of_the_book_if_wanted_to_change>",
  "edition": "<edition_of_the_book_if_wanted_to_change>",
  "publication_year": "<publication_year_of_the_book_if_wanted_to_change>",
  "authors": "<array_of_author_ids_if_wanted_to_change>"
}
#+END_SRC
*** DELETE =/book/:id=
Delete a record of a book. Identified using =id=.

** Deployment
Create a .env file with the following information:
#+BEGIN_SRC 
POSTGRES_USER=<postrgres_username>
POSTGRES_PASSWORD=<postrgres_password>
POSTGRES_DB=<postgres_db_name>
#+END_SRC

*** Docker-Based
*** Prerequisite
+ Docker
+ docker-compose

Run the docker-compose to start the API server.

#+BEGIN_SRC bash
$ docker-compose up
#+END_SRC

*** Local Deployment (Without Docker)
*** Prerequisite
+ postgres
+ node version > 12
+ yarn

Install the node dependencies 
#+BEGIN_SRC bash
$ yarn
#+END_SRC

Ensure that you have postrgres installed and it's running on your system
then start the server.
#+BEGIN_SRC bash
$ yarn start
#+END_SRC

** Usage
Navigate to =localhost:8080= and access the endpoints
** License
This project uses a MIT License, which can be viewed here [[file:LICENSE][here]].
